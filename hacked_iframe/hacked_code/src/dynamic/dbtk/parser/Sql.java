/* Generated By:JavaCC: Do not edit this line. Sql.java */
package dynamic.dbtk.parser;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.StringReader;
import java.util.Enumeration;
import java.util.Vector;

import dynamic.util.diagnostics.Diagnostics;
import dynamic.util.string.StringUtil;


/**
 * A parser for SQL Statements generated by JavaCC.
 * Use getQuery to get the fully constructed query.
 * The get*** clauses are only useful for breaking up the first top level query.
 *
 * <P>NOTE: Only edit the sql.jj file, not the Sql.java file.
 *
 * <pre>
 *  SQL jp;
 *	jp = Sql.fetchSql("SELECT * FROM cat c");
 *  jp.addWhereAndClause("c.color = 'white'");
 *  String query = jp.getQuery();
 * </pre>
 *
 * To compile this, use something like the following command:
 * <pre>
 * d:\dev\javacc2.0\bin\javacc.bat -OUTPUT_DIRECTORY:"d:\work\iframe2\src\dynamic\dbtk\parser" d:\work\iframe2\src\dynamic\dbtk\parser\sql.jj
 * </pre>
 *
 * @version $ID$
 */
public class Sql implements SqlConstants {
        private String[] query = new String[1]; // internal query storage
        private int level = 0;  // Parenthesis matching
        private boolean firstQuery = true;

        // Store the tables in the FROM clause.
        private Vector tables = new Vector();
        // Store WHERE clause fragments.
        private Vector whereFrags = new Vector();

        /**
	 * This constructor is not very useful.
	 */
        public Sql()
        {
        }


        /**
	 * Take a query and return it in a parsed object.
	 */
        public static Sql fetchSql(StringBuffer query) throws ParseException
        {
                return fetchSql(query.toString());
        }

        /**
	 * Take a query and return it in a parsed object.
	 */
        public static Sql fetchSql(String query) throws ParseException
        {
                StringReader reader = new StringReader(query);
                Sql temp = new Sql(reader);
                temp.setQuery(query);
                // Run the parse.
                temp.SelectStatement();
                return temp;
        }

        /**
	 * @return the constructed query
	 */
        public String getQuery()
        {
                StringBuffer tempQuery = new StringBuffer(getSelect());

                String s = getFrom();
                tempQuery.append(getWhiteSpace(s, tempQuery));
                tempQuery.append(s);
                s = getWhere();
                tempQuery.append(getWhiteSpace(s, tempQuery));
                tempQuery.append(s);
                s = getConnect();
                tempQuery.append(getWhiteSpace(s, tempQuery));
                tempQuery.append(s);
                s = getGroupBy();
                tempQuery.append(getWhiteSpace(s, tempQuery));
                tempQuery.append(s);
                s = getSet();
                tempQuery.append(getWhiteSpace(s, tempQuery));
                tempQuery.append(s);

                if (includeOrderBy == true)
                {
                        s = getOrderBy();
                        tempQuery.append(getWhiteSpace(s, tempQuery));
                        tempQuery.append(s);
                }

                s = getForUpdate();
                tempQuery.append(getWhiteSpace(s, tempQuery));
                tempQuery.append(s);

                return tempQuery.toString();
        }

        String getWhiteSpace(String aClause, StringBuffer tempQuery)
        {
                if (aClause.length() > 0 && !StringUtil.isWhitespace(aClause.charAt(0))
                 && tempQuery.length() > 0 && !StringUtil.isWhitespace(tempQuery.charAt(tempQuery.length()-1)))
                {
                        return " ";
                }
                else
                        return "";
        }

        private boolean distinct = false;

        /**
	 * If an n-way join is added, a DISTINCT clause is necessary
	 */
        public void setDistinct()
        {
                distinct = true;
        }

        /**
	 * The list of tables used in the primary query FROM clause stored in QueryTable objects.
	 *
	 * @return a vector of the tables in the FROM clause.
	 */
        public Vector getTables()
        {
                return tables;
        }

        /**
	 * @return the alias for the given table, null if no alias found.
	 */
        public String getTableAlias(String name)
        {
                String alias = null;
                Enumeration tableList = tables.elements();
                while (tableList.hasMoreElements())
                {
                        QueryTable qt = (QueryTable)tableList.nextElement();
                        if (qt.getName().equalsIgnoreCase(name))
                        {
                                alias = qt.getAlias();
                                break;
                        }
                }
                return alias;
        }

        /**
	 * @return the table name for the given alias, null if no alias found.
	 */
        public String getTableForAlias(String alias)
        {
                String tableName = null;
                Enumeration tableList = tables.elements();
                while (tableList.hasMoreElements())
                {
                        QueryTable qt = (QueryTable)tableList.nextElement();
                        if (qt.getAlias().equalsIgnoreCase(alias))
                        {
                                tableName = qt.getName();
                                break;
                        }
                }
                return tableName;
        }

        /**
	 * Create a new table alias that is not already
	 * being used in this query.
	 *
	 * @return the new alias for the given table
	 */
        public String createTableAlias(String name)
        {
                String aliasRoot = name.substring(0,1);
                String alias = null;

                // Even if all the tables have aliases that match the
                // generated alias naming pattern, once more through
                // the loop guarantees a unique alias.
                for (int i = 0; i <= tables.size()+1; i++)
                {
                        alias = aliasRoot + i;
                        boolean found = false;
                        Enumeration tableList = tables.elements();
                        while (tableList.hasMoreElements())
                        {
                                QueryTable qt = (QueryTable)tableList.nextElement();
                                if (qt.getAlias().equalsIgnoreCase(alias))
                                {
                                        found = true;;
                                }
                        }
                        if (found != true)
                        {
                                break;
                        }
                }
                return alias;
        }

        /**
	 * @return true if the table is in the FROM clause
	 */
        public boolean foundTable(String name)
        {
                boolean found = false;
                Enumeration tableList = tables.elements();
                while (tableList.hasMoreElements())
                {
                        if (((QueryTable)tableList.nextElement()).getName().equalsIgnoreCase(name))
                        {
                                found = true;
                                break;
                        }
                }
                return found;
        }

        /**
	 * @return true if the table alias is in the FROM clause
	 */
        public boolean foundTableAlias(String alias)
        {
                boolean found = false;
                Enumeration tableList = tables.elements();
                while (tableList.hasMoreElements())
                {
                        if (((QueryTable)tableList.nextElement()).getAlias().equalsIgnoreCase(alias))
                        {
                                found = true;
                                break;
                        }
                }
                return found;
        }


        private ParserClause selectClause = new ParserClause();
        private ParserClause distinctClause = new ParserClause();

        /**
	 * @return the SELECT portion of the statement.
	 */
        public String getSelect()
        {
                String selectFrag = null;
                if (distinct)
                {
                        String checkDistinct = distinctClause.getClause();
                        if (checkDistinct.trim().equalsIgnoreCase("DISTINCT"))
                        {
                                selectFrag = selectClause.getClause();
                        }
                        else
                        {
                                // Force the distinct clause
                                ParserClause part = new ParserClause();
                                part.setBegin(selectClause.begin.column, selectClause.begin.line);
                                part.setEnd(distinctClause.begin.column, distinctClause.begin.line);
                                selectFrag = part.getClause() + " DISTINCT";
                                part.setBegin(distinctClause.begin.column, distinctClause.begin.line);
                                part.setEnd(selectClause.end.column, selectClause.end.line);
                                selectFrag += part.getClause();
                        }
                }
                else
                {
                        selectFrag = selectClause.getClause();
                }

                return selectFrag;
        }


        private ParserClause fromClause = new ParserClause();

        /**
	 * @return the FROM portion of the statement.
	 */
        public String getFrom()
        {
                StringBuffer tempFrom = new StringBuffer(getOriginalFrom());

                if (tables.size() > 0)
                {
                        Enumeration tableList = tables.elements();
                        while (tableList.hasMoreElements())
                        {
                                QueryTable curTab = (QueryTable)tableList.nextElement();
                                if (!curTab.isOriginal())
                                {
                                        tempFrom.append(", ");
                                        tempFrom.append(curTab.toString());
                                }
                        }
                }
                return tempFrom.toString();
        }

        /**
	 * @return the original FROM portion of the statement.
	 */
        public String getOriginalFrom()
        {
                return fromClause.getClause();
        }


        private ParserClause whereClause = new ParserClause();

        /**
	 * @return the original WHERE portion of the statement.
	 */
        public String getOriginalWhere()
        {
                return whereClause.getClause();
        }

        /**
	 * @return the WHERE portion of the statement.
	 */
        public String getWhere()
        {
                StringBuffer tempWhere = new StringBuffer(getOriginalWhere());

                Enumeration whereClauseList = whereFrags.elements();
                while (whereClauseList.hasMoreElements())
                {
                        WhereClause whereFrag = (WhereClause)whereClauseList.nextElement();

                        if (tempWhere.length() > 0)
                        {
                                tempWhere.append(" ");
                                if (whereFrag instanceof AndClause )
                                        tempWhere.append("AND ");
                                else
                                        tempWhere.append("OR ");
                        }
                        else tempWhere.append("WHERE ");

                        tempWhere.append(whereFrag.toString());
                }
                return tempWhere.toString();
        }


        private ParserClause connectClause = new ParserClause();

        /**
	 * @return the CONNECT portion of the statement.
	 */
        public String getConnect()
        {
                return connectClause.getClause();
        }


        private ParserClause groupByClause = new ParserClause();

        /**
	 * @return the GROUP BY portion of the statement.
	 */
        public String getGroupBy()
        {
                return groupByClause.getClause();
        }


        private ParserClause orderByClause = new ParserClause();
        private String overrideOrderByClause;
        private boolean includeOrderBy=true;

        /**
	 * @return the ORDER BY portion of the statement.
	 */
        public String getOrderBy()
        {
                if (overrideOrderByClause == null)
                        return orderByClause.getClause();
                else
                        return overrideOrderByClause;
        }

        /**
	 * Replace the existing order by statement.
	 * Must start with "ORDER BY"
	 *
	 * @param replace the existing order by clause.
	 */
        public void setOrderBy(String overrideOrderByClause)
        {
                this.overrideOrderByClause = overrideOrderByClause == null ? "" : overrideOrderByClause;
        }

        /**
	 * Call this with false if no order by is wanted.
	 * The default is that the order by clause will be included.
	 */
        public void includeOrderBy(boolean includeOrderBy)
        {
                this.includeOrderBy=includeOrderBy;
        }


        private ParserClause forUpdateClause = new ParserClause();

        /**
	 * @return the FOR UPDATE portion of the statement.
	 */
        public String getForUpdate()
        {
                return forUpdateClause.getClause();
        }


        private ParserClause setClause = new ParserClause();

        /**
	 * This may contain all the statements following the primary statement
	 * connected by a UNION, MINUS or INTERSECT
	 *
	 * @return the set portion of the statement.
	 */
        public String getSet()
        {
                return setClause.getClause();
        }



        /**
	 * Add a table to the FROM clause.
	 *
	 * @param name the name of the table
	 * @param alias the alias for the table
	 */
        public void addFromTable(String name, String alias)
        {
                tables.addElement(new QueryTable(name, alias));
        }


        /**
	 * Add a WHERE clause fragment to the query.
	 */
        public void addWhereAndClause(String clause)
        {
                whereFrags.addElement(new AndClause(clause));
        }

        /**
	 * Add a WHERE clause fragment to the query.
	 */
        public void addWhereOrClause(String clause)
        {
                whereFrags.addElement(new OrClause(clause));
        }


        /**
	 * Test harness.
	 * If a file name is given, the statement from the file will be read and parsed.
	 * Otherwise, the hard coded statement will be used.
	 */
        public static void main( String args[] )
        throws ParseException
        {

                Sql jp = null;

                if ( args.length < 1  )
                {
                        String query = null;
                        System.out.println("Using fixed SQL");

                        if (true)
                        {
                        query = "SELECT wo.work_order_id id, wo.work_order_number, wo.name work_order_name, wot.name order_type,"
                        +" stata.status_label(wo.work_order_id, wos.code, wo.due_date, wo.site_id) order_status,"
                        +" stata.status_color(wo.work_order_id, wos.code, wo.due_date, wo.site_id) order_status_color,"
                        +"  atype.name asset_type, o.name site,"
                        +"  nvl(rtrim(c.call_number), ' ') call_number, c.call_id, to_char(wo.date_reported,'MM/DD/YYYY hh:mm') date_reported,"
                        +"  wo.date_reported sort_date_reported, a.serial_number"
                        +" FROM work_orders wo, work_order_types wot,"
                        +" status wos, asset_types atype, organizations o,"
                        +" calls c, assets a"
                        +" WHERE (1 is NULL OR o.affiliation_type_id = 1)"
                        +" AND (NULL is NULL OR o.organization_id = 1)"
                        +" AND o.organization_id IN (SELECT organization_id FROM organizations"
                        +"  START WITH organization_id = 2"
                        +"  CONNECT BY PRIOR organization_id = parent_organization_id)"
                        +" AND (1 is NULL OR wos.code IN(1,2))"
                        +" AND 1 is NULL OR a.asset_id = 1"
                        +" AND wo.work_order_type_id = wot.work_order_type_id (+)"
                        +"  AND wo.asset_type_id = atype.asset_type_id (+)"
                        +" AND wo.site_id = o.organization_id (+)"
                        +" AND wo.call_id = c.call_id (+)"
                        +" AND wo.status_id = wos.status_id(+)"
                        +" AND wo.asset_id = a.asset_id (+)"
//			+" ORDER BY o.name, wo.work_order_number";
//			}
//
//			if (true)
//			{
//			query = "SELECT w.work_order_id work_order_id, w.work_order_number,w.name name,"
                        + " UNION SELECT w.work_order_id work_order_id, w.work_order_number,w.name name,"
                        +" w.approval_comment approval_comment, wot.name work_order_type,"
                        +" to_char(w.date_completed,'MM/DD/YYYY hh:mm') date_completed, w.date_completed sort_date_completed,ast.name asset_type,"
                        +" decode( (w.billable_time*organization_provider.hourly_rate), NULL, 'Hourly rate or billable time not set.', (w.billable_time * organization_provider.hourly_rate) ) billable_labor,"
                        +" SUM(NVL(pu.actual_price*pu.quantity, 0)) parts_total_cost, act.activity_id activity_id, wc.name work_center, wos.name status, "
                        +" DECODE(wos.code, 'REJECTED', 'checked', '') reject_status"
                        +" FROM work_orders w, parts_used pu, asset_types ast, work_order_types wot, status wos, activities act, assets a, work_centers wc, organizations organization_site, organizations organization_provider"
                        +" WHERE "
                        +" (wos.code = 'COMPLETED' OR wos.code = 'REJECTED' OR wos.code = 'LIMITEXCEEDED')"
                        +" AND wos.status_id = w.status_id"
                        +" AND w.asset_type_id = ast.asset_type_id"
                        +" AND wot.work_order_type_id = w.work_order_type_id"
                        +" AND w.site_id =  1"
                        +" AND w.work_order_id = act.work_order_id(+)"
                        +" AND w.asset_id = a.asset_id (+)"
                        +" AND a.work_center_id = wc.work_center_id(+)"
                        +" \u0009AND a.organization_id = organization_site.organization_id"
                        +" AND w.work_order_id = pu.work_order_id(+)"
                        +" AND w.provider_id = organization_provider.organization_id"
                        +" GROUP BY w.work_order_id, date_completed, w.work_order_number,w.name, w.approval_comment, wot.name, ast.name, w.billable_time  , act.activity_id, wc.name, wos.name, wos.code, date_completed, wos.code, organization_site.hourly_rate, organization_provider.hourly_rate"
                        +" ORDER BY date_completed, wos.code";
                        }


                        jp = Sql.fetchSql(query);

                        if (true)
                        {
                                System.out.println("query = " + query);
                                System.out.println("select = " + jp.getSelect());
                                System.out.println("from = " + jp.getFrom());
                                System.out.println("where = " + jp.getWhere());
                                System.out.println("connect = " + jp.getConnect());
                                System.out.println("groupBy = " + jp.getGroupBy());
                                System.out.println("orderBy = " + jp.getOrderBy());
                                System.out.println("set = " + jp.getSet());
                                Vector tables = jp.getTables();
                                for (int i = 0; i < tables.size(); i++)
                                {
                                        QueryTable qt = (QueryTable)tables.elementAt(i);
                                        System.out.println("table " + (i+1) + ", name = " + qt.getName() + ",alias = " + qt.getAlias());
                                }
                                jp.addWhereAndClause("w.name = 'Fred'");
                                jp.addFromTable("table_name1", "alias1");

                                System.out.println("CONSTRUCTED="+jp.getQuery());

                        }

                        System.out.println("Parse Successfull") ;
                }
                else
                {
                        try
                        {
                                BufferedReader br = new BufferedReader(new FileReader(args[0]));

                                StringBuffer query = new StringBuffer();
                                int character = br.read();
                                while (character != -1)
                                {
                                        query.append((char)character);
                                        character = br.read();
                                }
                                jp = Sql.fetchSql(query) ;
                                if ( args.length > 0 )
                                {
                                        System.out.println(args[0]) ;
                                }
                                System.out.println("Original Query = " + query);
                                System.out.println("select = " + jp.getSelect());
//	 			jp.setDistinct();
//	 			System.out.println("select distinct = " + jp.getSelect());
                                System.out.println("from = " + jp.getFrom());
                                System.out.println("where = " + jp.getWhere());
                                System.out.println("connect = " + jp.getConnect());
                                System.out.println("groupBy = " + jp.getGroupBy());
                                System.out.println("orderBy = " + jp.getOrderBy());
                                System.out.println("set = " + jp.getSet());
                                Vector tables = jp.getTables();
                                for (int i = 0; i < tables.size(); i++)
                                {
                                        QueryTable qt = (QueryTable)tables.elementAt(i);
                                        System.out.println("table " + (i+1) + ", name = " + qt.getName() + ",alias = " + qt.getAlias());
                                }


//				jp.skipOrderBy();
                                jp.setOrderBy("ORDER BY test");
                                System.out.println("CONSTRUCTED="+jp.getQuery());
                                System.out.println("Parse Successfull") ;

                        }
                        catch (FileNotFoundException e)
                        {
                                System.out.println("File " + args[0] + " not found.") ;
                        }
                        catch (IOException e)
                        {
                                System.out.println("Error reading file " + args[0] + e.getMessage()) ;
                        }
                } // else ends here
                System.exit(0);
        }


        /**
	 * Save the original query string.
	 */
        public void setQuery(String query)
        {
                Vector lines = new Vector();
                BufferedReader lineReader = new BufferedReader(new StringReader(query));
                try
                {
                        StringBuffer line = new StringBuffer();
                        int character;
                        while ((character = lineReader.read()) != -1)
                        {
                                line.append((char)character);
                                if ((char)character == '\n')
                                {
                                        lines.addElement(line.toString());
                                        line.setLength(0);
                                }
                        }
                        if (line.length() > 0) lines.addElement(line.toString());
                }
                catch (IOException io)
                {
                        Diagnostics.error("Error reading query: "+io);
                }
                this.query = (String[])lines.toArray(this.query);
        }



        /**
	 * Storage for WHERE clause fragments.
	 * When constructing the WHERE clause, it is necessary to know
	 * if the fragment is to be AND'd or OR'd.
	 */
        private class WhereClause
        {
                boolean and = true;  // If it is not an AND clause, it is an OR clause.
                String clause;

                WhereClause(String clause)
                {
                        this.clause = clause;
                }

                WhereClause(String clause, boolean type)
                {
                        this.clause = clause;
                        this.and = type;
                }

                public String toString()
                {
                        return clause;
                }

                boolean isAnd()
                {
                        return and;
                }

                boolean isOr()
                {
                        return !and;
                }

        }

        /**
	 * A WHERE clause fragment that needs to be AND'd
	 */
        private class AndClause extends WhereClause
        {
                AndClause(String clause)
                {
                        super(clause);
                }

        }

        /**
	 * A WHERE clause fragment that needs to be OR'd
	 */
        private class OrClause extends WhereClause
        {
                OrClause(String clause)
                {
                        super(clause, false);
                }
        }


        /**
	 * The location in the parsed text.
	 * The parser uses column and line number
	 */
        private class ParserLocation
        {
                int column;
                int line;

                ParserLocation(int inColumn, int inLine)
                {
                        column = inColumn;
                        line = inLine;
                }

        }

        /**
	 * Use for getting the query clause.
	 */
        private class ParserClause
        {
                ParserLocation begin;
                ParserLocation end;

                void setBegin(int column, int line)
                {
                        begin = new ParserLocation(column == 0? 0 : column-1, line);
                }

                void setEnd(int column, int line)
                {
                        // Don't change the value if this is the last character of the last line
                        if (!(line == query.length && column == query[line-1].length()))
                                column = column == 0 ? 0 : column-1;    // and don't go below 0
                        end = new ParserLocation(column, line);
                }


                /**
		 * @return the clause as specified by the begin/end location
		 */
                String getClause()
                {
                        StringBuffer clause = new StringBuffer();
                        if (begin != null)
                        {
                                for (int i = begin.line; i <=  end.line; i++)
                                {
                                        if (begin.line == end.line) clause.append(query[i-1].substring(begin.column, end.column));      // clause starts and ends on this line
                                        else if (begin.line == i) clause.append(query[i-1].substring(begin.column));    // clause starts on this line
                                        else if (end.line == i) clause.append(query[i-1].substring(0, end.column));     // clause ends in this line
                                        else clause.append(query[i-1]);
                                }
                        }
                        return clause.toString();
                }

        }

/* ---------------- General Productions --------------------- */
  final public void TableColumn() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_CASE:
      CaseStatement();
      break;
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:
      OracleObjectName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 137:
        jj_consume_token(137);
        OracleObjectName();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 137:
          jj_consume_token(137);
          OracleObjectName();
          break;
        default:
          jj_la1[0] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public Token OracleObjectName() throws ParseException {
  Token oon;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      oon = jj_consume_token(S_IDENTIFIER);
      break;
    case S_QUOTED_IDENTIFIER:
      oon = jj_consume_token(S_QUOTED_IDENTIFIER);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return oon;}
    throw new Error("Missing return statement in function");
  }

  final public void Relop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 138:
      jj_consume_token(138);
      break;
    case 139:
      jj_consume_token(139);
      break;
    case 140:
      jj_consume_token(140);
      break;
    case 141:
      jj_consume_token(141);
      break;
    case 142:
      jj_consume_token(142);
      break;
    case 143:
      jj_consume_token(143);
      break;
    case 144:
      jj_consume_token(144);
      break;
    case 145:
      jj_consume_token(145);
      break;
    case 146:
      jj_consume_token(146);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public QueryTable TableReference() throws ParseException {
  Token t1, t2=null;
QueryTable qt;
    // user.table
        t1 = OracleObjectName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 137:
      jj_consume_token(137);
      t2 = OracleObjectName();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
                if (t2 == null) qt = new QueryTable(t1.image);
                else qt = new QueryTable(t1.image + "." + t2.image);
                {if (true) return qt;}
    throw new Error("Missing return statement in function");
  }

  final public void NumOrID() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      jj_consume_token(S_IDENTIFIER);
      break;
    case S_NUMBER:
    case 147:
    case 148:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 147:
      case 148:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 147:
          jj_consume_token(147);
          break;
        case 148:
          jj_consume_token(148);
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(S_NUMBER);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void IsNullClause() throws ParseException {
    jj_consume_token(K_IS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(K_NULL);
  }

/* --------------- General Productions ends here --------------- */

/* ----------- SQL productions start here ----------------- */
  final public void SelectStatement() throws ParseException {
          selectClause.setBegin(0,1);
    SelectWithoutOrder();

    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ORDER_BY:
      OrderByClause();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_FOR_UPDATE_OF:
      ForUpdateClause();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
  }

  final public void SelectWithoutOrder() throws ParseException {
    jj_consume_token(K_SELECT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ALL:
    case K_DISTINCT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ALL:
        jj_consume_token(K_ALL);
        break;
      case K_DISTINCT:
        jj_consume_token(K_DISTINCT);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
        if (level == 0  && firstQuery == true)
        {
                distinctClause.setBegin(jj_input_stream.getBeginColumn(), jj_input_stream.getBeginLine());
                distinctClause.setEnd(jj_input_stream.getEndColumn()+1, jj_input_stream.getEndLine());}
    SelectList();
        if (level == 0  && firstQuery == true)
                selectClause.setEnd(jj_input_stream.getBeginColumn(),jj_input_stream.getBeginLine());
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_INTO:
      IntoClause();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    FromClause();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_WHERE:
      WhereClause();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_START_WITH:
    case K_CONNECT_BY:
      ConnectClause();
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_GROUP_BY:
      GroupByClause();
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_INTERSECT:
    case K_MINUS:
    case K_UNION:
      SetClause();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
  }

/* Checks for whatever follows  SELECT */
  final public void SelectList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 149:
      jj_consume_token(149);
      break;
    case K_NULL:
    case K_CASE:
    case S_NUMBER:
    case S_IDENTIFIER:
    case S_BIND:
    case S_CHAR_LITERAL:
    case S_QUOTED_IDENTIFIER:
    case S_LEFT_PAREN:
    case 147:
    case 148:
      SelectItem();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 150:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_1;
        }
        jj_consume_token(150);
        SelectItem();
      }
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void SelectItem() throws ParseException {
    if (jj_2_1(2)) {
      OracleObjectName();
      jj_consume_token(151);
    } else if (jj_2_2(4)) {
      OracleObjectName();
      jj_consume_token(137);
      OracleObjectName();
      jj_consume_token(151);
    } else if (jj_2_3(2)) {
      jj_consume_token(S_LEFT_PAREN);
                        level++;
      SelectWithoutOrder();
                                                        level--;
      jj_consume_token(S_RIGHT_PAREN);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NULL:
      case K_CASE:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_BIND:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case S_LEFT_PAREN:
      case 147:
      case 148:
        SQLSimpleExpression();
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      jj_consume_token(S_IDENTIFIER);
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
  }

  final public void IntoClause() throws ParseException {
    jj_consume_token(K_INTO);
    IntoItem();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 150:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_2;
      }
      jj_consume_token(150);
      IntoItem();
    }
  }

  final public void IntoItem() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      jj_consume_token(S_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 137:
        jj_consume_token(137);
        jj_consume_token(S_IDENTIFIER);
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      break;
    case S_BIND:
      jj_consume_token(S_BIND);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void FromClause() throws ParseException {
  if (level == 0 && fromClause.begin == null)
        fromClause.setBegin(jj_input_stream.getBeginColumn(), jj_input_stream.getBeginLine());
    jj_consume_token(K_FROM);
    SimpleFromItem();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_FULL:
    case K_INNER:
    case K_JOIN:
    case K_LEFT:
    case K_RIGHT:
      label_3:
      while (true) {
        AnsiFromClause();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_FULL:
        case K_INNER:
        case K_JOIN:
        case K_LEFT:
        case K_RIGHT:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_3;
        }
      }
      break;
    default:
      jj_la1[28] = jj_gen;
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 150:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_4;
        }
        jj_consume_token(150);
        SimpleFromItem();
      }
    }
        if (level == 0 && fromClause.end == null)
        {
                        fromClause.setEnd(jj_input_stream.getBeginColumn(), jj_input_stream.getBeginLine());
                }
  }

  final public void AnsiFromClause() throws ParseException {
    AnsiJoin();
    SimpleFromItem();
    label_5:
    while (true) {
      jj_consume_token(K_ON);
      SQLAndExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ON:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_5;
      }
    }
  }

  final public void SimpleFromItem() throws ParseException {
        QueryTable qt=null;
        Token alias=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:
      qt = TableReference();
      break;
    case S_LEFT_PAREN:
      jj_consume_token(S_LEFT_PAREN);
                                           level++;
      SubQuery();
      jj_consume_token(S_RIGHT_PAREN);
                                                                                  level--;
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      alias = jj_consume_token(S_IDENTIFIER);
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
                if (qt != null)
                {
                        qt.setOriginal();
                        if (alias != null)
                                qt.setAlias(alias.image);
                        if (level == 0 && firstQuery == true)
                                tables.addElement(qt);
                }
  }

  final public void WhereClause() throws ParseException {
 if (level == 0 && whereClause.begin == null)
        whereClause.setBegin(jj_input_stream.getBeginColumn(), jj_input_stream.getBeginLine());
    jj_consume_token(K_WHERE);
    SQLExpression();
        if (level == 0 && whereClause.end == null)
        {
                        whereClause.setEnd(jj_input_stream.getBeginColumn(), jj_input_stream.getBeginLine());
                }
  }

  final public void ConnectClause() throws ParseException {
 if (level == 0 && connectClause.begin == null)
        connectClause.setBegin(jj_input_stream.getBeginColumn(),jj_input_stream.getBeginLine());
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_START_WITH:
      jj_consume_token(K_START_WITH);
      SQLExpression();
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    jj_consume_token(K_CONNECT_BY);
    SQLExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_START_WITH:
      jj_consume_token(K_START_WITH);
      SQLExpression();
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
        if (level == 0 && connectClause.end == null)
        {
                        connectClause.setEnd(jj_input_stream.getBeginColumn(),jj_input_stream.getBeginLine());
                }
  }

  final public void GroupByClause() throws ParseException {
 if (level == 0 && groupByClause.begin == null)
        groupByClause.setBegin(jj_input_stream.getBeginColumn(), jj_input_stream.getBeginLine());
    jj_consume_token(K_GROUP_BY);
    SQLExpressionList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_HAVING:
      jj_consume_token(K_HAVING);
      SQLExpression();
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
        if (level == 0 && groupByClause.end == null)
        {
                        groupByClause.setEnd(jj_input_stream.getBeginColumn(), jj_input_stream.getBeginLine());
                }
  }

  final public void SetClause() throws ParseException {
 if (level == 0 && setClause.begin == null)
        setClause.setBegin(jj_input_stream.getBeginColumn(),jj_input_stream.getBeginLine());
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_UNION:
      jj_consume_token(K_UNION);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ALL:
        jj_consume_token(K_ALL);
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      break;
    case K_INTERSECT:
      jj_consume_token(K_INTERSECT);
      break;
    case K_MINUS:
      jj_consume_token(K_MINUS);
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_4(2147483647)) {
      jj_consume_token(S_LEFT_PAREN);
                                                level++;firstQuery = false;
      SelectWithoutOrder();
      jj_consume_token(S_RIGHT_PAREN);
                                                                                                                   level--;
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_SELECT:
           firstQuery = false;
        SelectWithoutOrder();
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        if (level == 0)
        {
                        setClause.setEnd(jj_input_stream.getBeginColumn(),jj_input_stream.getBeginLine());
                }
  }

  final public void OrderByClause() throws ParseException {
 if (level == 0)
        orderByClause.setBegin(jj_input_stream.getBeginColumn(),jj_input_stream.getBeginLine());
    jj_consume_token(K_ORDER_BY);
    SQLSimpleExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ASC:
    case K_DESC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ASC:
        jj_consume_token(K_ASC);
        break;
      case K_DESC:
        jj_consume_token(K_DESC);
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 150:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_6;
      }
      jj_consume_token(150);
      SQLSimpleExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ASC:
      case K_DESC:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ASC:
          jj_consume_token(K_ASC);
          break;
        case K_DESC:
          jj_consume_token(K_DESC);
          break;
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
    }
        if (level == 0)
        {
                        orderByClause.setEnd(jj_input_stream.getBeginColumn(),jj_input_stream.getBeginLine());
                }
  }

  final public void ForUpdateClause() throws ParseException {
 if (level == 0)
        forUpdateClause.setBegin(jj_input_stream.getBeginColumn(),jj_input_stream.getBeginLine());
    jj_consume_token(K_FOR_UPDATE_OF);
    TableColumn();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 150:
        ;
        break;
      default:
        jj_la1[43] = jj_gen;
        break label_7;
      }
      jj_consume_token(150);
      TableColumn();
    }
        if (level == 0)
        {
                        forUpdateClause.setEnd(jj_input_stream.getBeginColumn(),jj_input_stream.getBeginLine());
                }
  }

  final public void SQLExpression() throws ParseException {
    SQLAndExpression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_OR:
        ;
        break;
      default:
        jj_la1[44] = jj_gen;
        break label_8;
      }
      jj_consume_token(K_OR);
      SQLAndExpression();
    }
  }

  final public void SQLAndExpression() throws ParseException {
    SQLUnaryLogicalExpression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AND:
        ;
        break;
      default:
        jj_la1[45] = jj_gen;
        break label_9;
      }
      jj_consume_token(K_AND);
      SQLUnaryLogicalExpression();
    }
  }

  final public void SQLUnaryLogicalExpression() throws ParseException {
    if (jj_2_5(2)) {
      ExistsClause();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
      case K_NULL:
      case K_PRIOR:
      case K_CASE:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_BIND:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case S_LEFT_PAREN:
      case 147:
      case 148:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_NOT:
          jj_consume_token(K_NOT);
          break;
        default:
          jj_la1[46] = jj_gen;
          ;
        }
        SQLRelationalExpression();
        break;
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void ExistsClause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
      break;
    default:
      jj_la1[48] = jj_gen;
      ;
    }
    jj_consume_token(K_EXISTS);
    jj_consume_token(S_LEFT_PAREN);
                                     level++;
    SubQuery();
    jj_consume_token(S_RIGHT_PAREN);
                                                                            level--;
  }

  final public void SQLRelationalExpression() throws ParseException {
    if (jj_2_6(2147483647)) {
      jj_consume_token(S_LEFT_PAREN);
                     level++;
      SQLExpressionList();
      jj_consume_token(S_RIGHT_PAREN);
                                                                     level--;
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NULL:
      case K_PRIOR:
      case K_CASE:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_BIND:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case S_LEFT_PAREN:
      case 147:
      case 148:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_PRIOR:
          jj_consume_token(K_PRIOR);
          break;
        default:
          jj_la1[49] = jj_gen;
          ;
        }
        SQLSimpleExpression();
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_BETWEEN:
    case K_IN:
    case K_IS:
    case K_LIKE:
    case K_NOT:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 138:
      case 139:
      case 140:
      case 141:
      case 142:
      case 143:
      case 144:
      case 145:
      case 146:
        SQLRelationalOperatorExpression();
        break;
      default:
        jj_la1[51] = jj_gen;
        if (jj_2_7(2)) {
          SQLInClause();
        } else if (jj_2_8(2)) {
          SQLBetweenClause();
        } else if (jj_2_9(2)) {
          SQLLikeClause();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_IS:
            IsNullClause();
            break;
          default:
            jj_la1[52] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      break;
    default:
      jj_la1[53] = jj_gen;
      ;
    }
  }

  final public void SQLExpressionList() throws ParseException {
    SQLSimpleExpression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 150:
        ;
        break;
      default:
        jj_la1[54] = jj_gen;
        break label_10;
      }
      jj_consume_token(150);
      SQLSimpleExpression();
    }
  }

  final public void SQLRelationalOperatorExpression() throws ParseException {
    Relop();
    if (jj_2_10(2147483647)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ALL:
      case K_ANY:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ALL:
          jj_consume_token(K_ALL);
          break;
        case K_ANY:
          jj_consume_token(K_ANY);
          break;
        default:
          jj_la1[55] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[56] = jj_gen;
        ;
      }
      jj_consume_token(S_LEFT_PAREN);
                                         level++;
      SubQuery();
      jj_consume_token(S_RIGHT_PAREN);
                                                                                level--;
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NULL:
      case K_PRIOR:
      case K_CASE:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_BIND:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case S_LEFT_PAREN:
      case 147:
      case 148:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_PRIOR:
          jj_consume_token(K_PRIOR);
          break;
        default:
          jj_la1[57] = jj_gen;
          ;
        }
        SQLSimpleExpression();
        break;
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void SQLInClause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
      break;
    default:
      jj_la1[59] = jj_gen;
      ;
    }
    jj_consume_token(K_IN);
    jj_consume_token(S_LEFT_PAREN);
                                 level++;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NULL:
    case K_CASE:
    case S_NUMBER:
    case S_IDENTIFIER:
    case S_BIND:
    case S_CHAR_LITERAL:
    case S_QUOTED_IDENTIFIER:
    case S_LEFT_PAREN:
    case 147:
    case 148:
      SQLExpressionList();
      break;
    case K_SELECT:
      SubQuery();
      break;
    default:
      jj_la1[60] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(S_RIGHT_PAREN);
                                                                                                level--;
  }

  final public void SQLBetweenClause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
      break;
    default:
      jj_la1[61] = jj_gen;
      ;
    }
    jj_consume_token(K_BETWEEN);
    SQLSimpleExpression();
    jj_consume_token(K_AND);
    SQLSimpleExpression();
  }

  final public void SQLLikeClause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
      break;
    default:
      jj_la1[62] = jj_gen;
      ;
    }
    jj_consume_token(K_LIKE);
    SQLSimpleExpression();
  }

  final public void SQLSimpleExpression() throws ParseException {
    SQLMultiplicativeExpression();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 147:
      case 148:
      case 152:
        ;
        break;
      default:
        jj_la1[63] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 147:
        jj_consume_token(147);
        break;
      case 148:
        jj_consume_token(148);
        break;
      case 152:
        jj_consume_token(152);
        break;
      default:
        jj_la1[64] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      SQLMultiplicativeExpression();
    }
  }

  final public void SQLMultiplicativeExpression() throws ParseException {
    SQLExponentExpression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 149:
      case 153:
        ;
        break;
      default:
        jj_la1[65] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 149:
        jj_consume_token(149);
        break;
      case 153:
        jj_consume_token(153);
        break;
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      SQLExponentExpression();
    }
  }

  final public void SQLExponentExpression() throws ParseException {
    SQLUnaryExpression();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 154:
        ;
        break;
      default:
        jj_la1[67] = jj_gen;
        break label_13;
      }
      jj_consume_token(154);
      SQLUnaryExpression();
    }
  }

  final public void SQLUnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 147:
    case 148:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 147:
        jj_consume_token(147);
        break;
      case 148:
        jj_consume_token(148);
        break;
      default:
        jj_la1[68] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[69] = jj_gen;
      ;
    }
    SQLPrimaryExpression();
  }

  final public void SQLPrimaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NULL:
      jj_consume_token(K_NULL);
      break;
    default:
      jj_la1[70] = jj_gen;
      if (jj_2_11(2147483647)) {
        FunctionCall();
      } else if (jj_2_12(2147483647)) {
        OuterJoinExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_CASE:
        case S_IDENTIFIER:
        case S_QUOTED_IDENTIFIER:
          TableColumn();
          break;
        case S_NUMBER:
          jj_consume_token(S_NUMBER);
          break;
        case S_CHAR_LITERAL:
          jj_consume_token(S_CHAR_LITERAL);
          break;
        case S_BIND:
          jj_consume_token(S_BIND);
          break;
        default:
          jj_la1[71] = jj_gen;
          if (jj_2_13(2)) {
            jj_consume_token(S_LEFT_PAREN);
                                 level++;
            SQLExpression();
            jj_consume_token(S_RIGHT_PAREN);
                                                                             level--;
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case S_LEFT_PAREN:
              jj_consume_token(S_LEFT_PAREN);
                   level++;
              SelectWithoutOrder();
              jj_consume_token(S_RIGHT_PAREN);
                                                                    level--;
              break;
            default:
              jj_la1[72] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
  }

  final public void FunctionCall() throws ParseException {
    OracleObjectName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 137:
      jj_consume_token(137);
      OracleObjectName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 137:
        jj_consume_token(137);
        OracleObjectName();
        break;
      default:
        jj_la1[73] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[74] = jj_gen;
      ;
    }
    jj_consume_token(S_LEFT_PAREN);
                    level++;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ALL:
    case K_DISTINCT:
    case K_NULL:
    case K_CASE:
    case S_NUMBER:
    case S_IDENTIFIER:
    case S_BIND:
    case S_CHAR_LITERAL:
    case S_QUOTED_IDENTIFIER:
    case S_LEFT_PAREN:
    case 147:
    case 148:
    case 149:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ALL:
      case K_DISTINCT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_DISTINCT:
          jj_consume_token(K_DISTINCT);
          break;
        case K_ALL:
          jj_consume_token(K_ALL);
          break;
        default:
          jj_la1[75] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[76] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NULL:
      case K_CASE:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_BIND:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case S_LEFT_PAREN:
      case 147:
      case 148:
        SQLArguments();
        break;
      case 149:
        jj_consume_token(149);
        break;
      default:
        jj_la1[77] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[78] = jj_gen;
      ;
    }
    jj_consume_token(S_RIGHT_PAREN);
                                                                                                level--;
  }

  final public void SQLArguments() throws ParseException {
    SQLExpressionList();
  }

  final public void OuterJoinExpression() throws ParseException {
    OracleObjectName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 137:
      jj_consume_token(137);
      OracleObjectName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 137:
        jj_consume_token(137);
        OracleObjectName();
        break;
      default:
        jj_la1[79] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[80] = jj_gen;
      ;
    }
    jj_consume_token(S_OUTER);
  }

  final public void SubQuery() throws ParseException {
    SelectWithoutOrder();
  }

  final public void CaseStatement() throws ParseException {
    jj_consume_token(K_CASE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NULL:
    case K_CASE:
    case S_NUMBER:
    case S_IDENTIFIER:
    case S_BIND:
    case S_CHAR_LITERAL:
    case S_QUOTED_IDENTIFIER:
    case S_LEFT_PAREN:
    case 147:
    case 148:
      SQLSimpleExpression();
      break;
    default:
      jj_la1[81] = jj_gen;
      ;
    }
    label_14:
    while (true) {
      jj_consume_token(K_WHEN);
      SQLExpression();
      jj_consume_token(K_THEN);
      SQLExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_WHEN:
        ;
        break;
      default:
        jj_la1[82] = jj_gen;
        break label_14;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ELSE:
      jj_consume_token(K_ELSE);
      SQLExpression();
      break;
    default:
      jj_la1[83] = jj_gen;
      ;
    }
    jj_consume_token(K_END);
  }

  final public void AnsiJoin() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_FULL:
    case K_INNER:
    case K_LEFT:
    case K_RIGHT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_INNER:
        jj_consume_token(K_INNER);
        break;
      case K_FULL:
      case K_LEFT:
      case K_RIGHT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_FULL:
          jj_consume_token(K_FULL);
          break;
        case K_LEFT:
          jj_consume_token(K_LEFT);
          break;
        case K_RIGHT:
          jj_consume_token(K_RIGHT);
          break;
        default:
          jj_la1[84] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_OUTER:
          jj_consume_token(K_OUTER);
          break;
        default:
          jj_la1[85] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[86] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[87] = jj_gen;
      ;
    }
    jj_consume_token(K_JOIN);
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_3R_89() {
    if (jj_scan_token(150)) return true;
    if (jj_3R_71()) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_3R_110()) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(65)) jj_scanpos = xsp;
    if (jj_scan_token(K_BETWEEN)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_3R_100()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_89()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    Token xsp;
    if (jj_3R_88()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_88()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(150)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(65)) jj_scanpos = xsp;
    if (jj_scan_token(K_IN)) return true;
    if (jj_scan_token(S_LEFT_PAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) return true;
    }
    if (jj_scan_token(S_RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_scan_token(137)) return true;
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(7)) return true;
    }
    return false;
  }

  final private boolean jj_3R_114() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(81)) jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_scan_token(K_ELSE)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_scan_token(150)) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) jj_scanpos = xsp;
    if (jj_scan_token(S_LEFT_PAREN)) return true;
    if (jj_3R_99()) return true;
    if (jj_scan_token(S_RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_scan_token(K_FROM)) return true;
    if (jj_3R_71()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_3R_112()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) return true;
    }
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_scan_token(126)) return true;
    }
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_51()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(150)) return true;
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_scan_token(K_INTO)) return true;
    if (jj_3R_84()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_85()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_scan_token(S_LEFT_PAREN)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(150)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(S_LEFT_PAREN)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(S_RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_3R_109()) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(137)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(151)) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(81)) jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(151)) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_3R_82()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_83()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_scan_token(S_LEFT_PAREN)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(S_RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_101()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) return true;
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(123)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(149)) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_scan_token(K_OR)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_3R_75()) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(65)) jj_scanpos = xsp;
    if (jj_scan_token(K_EXISTS)) return true;
    if (jj_scan_token(S_LEFT_PAREN)) return true;
    if (jj_3R_99()) return true;
    if (jj_scan_token(S_RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(65)) jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) return true;
    }
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_scan_token(K_WHEN)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(K_THEN)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_3R_38()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_68()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_scan_token(137)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_scan_token(K_SELECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    xsp = jj_scanpos;
    if (jj_3R_60()) jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    xsp = jj_scanpos;
    if (jj_3R_62()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_3R_31()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_57()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_111() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(77)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_scan_token(137)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_3R_111()) return true;
    }
    return false;
  }

  final private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) jj_scanpos = xsp;
    if (jj_scan_token(K_JOIN)) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_scan_token(137)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_scan_token(137)) return true;
    if (jj_3R_15()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(137)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_scan_token(K_IS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(65)) jj_scanpos = xsp;
    if (jj_scan_token(K_NULL)) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_scan_token(K_CASE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_79()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_80()) jj_scanpos = xsp;
    if (jj_scan_token(K_END)) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(5)) return true;
    }
    return false;
  }

  final private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_scan_token(149)) return true;
    }
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(S_LEFT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_scan_token(137)) return true;
    if (jj_3R_15()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_scan_token(S_LEFT_PAREN)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(S_RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_3R_15()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) jj_scanpos = xsp;
    if (jj_scan_token(S_OUTER)) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_3R_15()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_scan_token(K_UNION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) return true;
    }
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_scan_token(137)) return true;
    if (jj_3R_15()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(138)) {
    jj_scanpos = xsp;
    if (jj_scan_token(139)) {
    jj_scanpos = xsp;
    if (jj_scan_token(140)) {
    jj_scanpos = xsp;
    if (jj_scan_token(141)) {
    jj_scanpos = xsp;
    if (jj_scan_token(142)) {
    jj_scanpos = xsp;
    if (jj_scan_token(143)) {
    jj_scanpos = xsp;
    if (jj_scan_token(144)) {
    jj_scanpos = xsp;
    if (jj_scan_token(145)) {
    jj_scanpos = xsp;
    if (jj_scan_token(146)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_scan_token(K_HAVING)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_3R_15()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) jj_scanpos = xsp;
    if (jj_scan_token(S_LEFT_PAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_29()) jj_scanpos = xsp;
    if (jj_scan_token(S_RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_scan_token(K_GROUP_BY)) return true;
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(123)) {
    jj_scanpos = xsp;
    if (jj_scan_token(128)) return true;
    }
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    }
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_3R_66()) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_3R_15()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_scan_token(K_START_WITH)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_scan_token(K_START_WITH)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_scan_token(154)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_90()) jj_scanpos = xsp;
    if (jj_scan_token(K_CONNECT_BY)) return true;
    if (jj_3R_25()) return true;
    xsp = jj_scanpos;
    if (jj_3R_91()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_scan_token(S_LEFT_PAREN)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(S_RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(S_LEFT_PAREN)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(S_RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(149)) {
    jj_scanpos = xsp;
    if (jj_scan_token(153)) return true;
    }
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(147)) {
    jj_scanpos = xsp;
    if (jj_scan_token(148)) {
    jj_scanpos = xsp;
    if (jj_scan_token(152)) return true;
    }
    }
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(127)) {
    jj_scanpos = xsp;
    if (jj_scan_token(126)) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_scan_token(K_ON)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(S_LEFT_PAREN)) return true;
    if (jj_3R_99()) return true;
    if (jj_scan_token(S_RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(147)) {
    jj_scanpos = xsp;
    if (jj_scan_token(148)) return true;
    }
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_scan_token(K_WHERE)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_3R_39()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_40()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_3R_32()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_33()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_scan_token(S_LEFT_PAREN)) return true;
    if (jj_scan_token(K_SELECT)) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_3R_26()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_27()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    }
    xsp = jj_scanpos;
    if (jj_scan_token(123)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_3R_104()) return true;
    if (jj_3R_71()) return true;
    Token xsp;
    if (jj_3R_105()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_105()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(65)) jj_scanpos = xsp;
    if (jj_scan_token(K_LIKE)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  public SqlTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[88];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
      jj_la1_4();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000020,0x20000020,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x10000200,0x10000200,0x0,0x10000200,0x10000200,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0xa0,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000020,0x20000020,0x0,0x20000020,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,0x40400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6040800,0x0,0x6040800,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x40400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x9020000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000800,0x0,0x4040800,0x4040800,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x8,0x0,0x0,0x0,0x0,0x4000000,0x0,0x4000000,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x2,0x2000a,0x2,0x20000,0x20008,0x0,0x0,0x2,0x0,0x0,0x0,0x20000,0x20008,0x2,0x80000008,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x8,0x0,0x0,0x8,0x0,0x0,0x4000000,0x2000,0x4000000,0x4000000,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x8100000,0x8000000,0x0,0x0,0x0,0x0,0x8200000,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x200,0x0,0xc8300000,0xc8300000,0x8000000,0x0,0x0,0x48000000,0x0,0x0,0x0,0x0,0x8000000,0x8000000,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc8300000,0x0,0x0,0xc8300000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc8300000,0x0,0xc8300000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc8300000,0x0,0x0,0x0,0x0,0x0,0xc8300000,0xc8300000,0x0,0x0,0xc8300000,0x4000,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_4() {
      jj_la1_4 = new int[] {0x200,0x200,0x1,0x1,0x7fc00,0x200,0x180000,0x180000,0x180000,0x0,0x10,0x100,0x0,0x0,0x0,0x0,0xc0,0x20,0x0,0x400000,0x380005,0x180005,0x0,0x400000,0x200,0x0,0x0,0x400000,0x0,0x0,0x5,0x0,0x40,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x400000,0x0,0x0,0x0,0x180005,0x0,0x0,0x180005,0x7fc00,0x0,0x7fc00,0x400000,0x0,0x0,0x0,0x180005,0x0,0x180005,0x0,0x0,0x1180000,0x1180000,0x2200000,0x2200000,0x4000000,0x180000,0x180000,0x0,0x1,0x4,0x200,0x200,0x0,0x0,0x380005,0x380005,0x200,0x200,0x180005,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[13];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public Sql(java.io.InputStream stream) {
     this(stream, null);
  }
  public Sql(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SqlTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 88; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 88; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Sql(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SqlTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 88; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 88; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Sql(SqlTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 88; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(SqlTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 88; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[155];
    for (int i = 0; i < 155; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 88; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 155; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 13; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
