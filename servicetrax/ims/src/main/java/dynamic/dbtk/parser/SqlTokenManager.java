/* Generated By:JavaCC: Do not edit this line. SqlTokenManager.java */
package dynamic.dbtk.parser;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.StringReader;
import java.util.Enumeration;
import java.util.Vector;
import dynamic.util.diagnostics.Diagnostics;
import dynamic.util.string.StringUtil;

public class SqlTokenManager implements SqlConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x2000000L) != 0L)
            return 3;
         if ((active2 & 0x4L) != 0L)
            return 101;
         if ((active0 & 0x600000000000L) != 0L)
         {
            jjmatchedKind = 123;
            return 45;
         }
         if ((active0 & 0xffff807fff807fe0L) != 0L || (active1 & 0xfffe01fffc01fL) != 0L)
         {
            jjmatchedKind = 123;
            return 102;
         }
         if ((active2 & 0x100000L) != 0L)
            return 0;
         if ((active1 & 0x1fe0000000L) != 0L)
         {
            jjmatchedKind = 123;
            return 55;
         }
         if ((active2 & 0x800200L) != 0L)
            return 103;
         if ((active1 & 0x3fe0L) != 0L)
         {
            jjmatchedKind = 123;
            return 37;
         }
         if ((active0 & 0x7f8000L) != 0L || (active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            return 65;
         }
         if ((active0 & 0x1f8000000000L) != 0L)
         {
            jjmatchedKind = 123;
            return 78;
         }
         return -1;
      case 1:
         if ((active1 & 0x600L) != 0L)
            return 36;
         if ((active0 & 0x1e0000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 1;
            }
            return 64;
         }
         if ((active1 & 0x1000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 1;
            }
            return 54;
         }
         if ((active0 & 0x1ff000040004300L) != 0L || (active1 & 0x80000000e0L) != 0L)
            return 102;
         if ((active0 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 1;
            }
            return 44;
         }
         if ((active0 & 0x20000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 1;
            }
            return 67;
         }
         if ((active0 & 0xfe00bdffbfe1bce0L) != 0L || (active1 & 0x1fff6ffffff91fL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 1;
            }
            return 102;
         }
         return -1;
      case 2:
         if ((active0 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 2;
            }
            return 43;
         }
         if ((active1 & 0x400L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 2;
            }
            return 35;
         }
         if ((active0 & 0x20000000000L) != 0L)
            return 104;
         if ((active0 & 0x2000002e0L) != 0L || (active1 & 0x80910803002L) != 0L)
            return 102;
         if ((active0 & 0xfefcbdfdbfe7bc00L) != 0L || (active1 & 0x1ff766ef7fc99dL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 2;
            }
            return 102;
         }
         if ((active0 & 0x180000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 2;
            }
            return 63;
         }
         if ((active1 & 0x1000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 2;
            }
            return 53;
         }
         return -1;
      case 3:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 3;
            return 47;
         }
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 3;
            return 62;
         }
         if ((active0 & 0x407c91bd2f773c00L) != 0L || (active1 & 0x9b726ef4fe815L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 3;
            return 102;
         }
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 3;
            return 39;
         }
         if ((active0 & 0xbe802c4090808000L) != 0L || (active1 & 0x16404000300188L) != 0L)
            return 102;
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 3;
            return 31;
         }
         return -1;
      case 4:
         if ((active1 & 0x400L) != 0L)
            return 105;
         if ((active0 & 0x400000000000L) != 0L)
            return 106;
         if ((active0 & 0x400c018100010400L) != 0L || (active1 & 0x98222040a2000L) != 0L)
            return 102;
         if ((active1 & 0x1000000000L) != 0L)
            return 107;
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 4;
            return 61;
         }
         if ((active0 & 0x70903c2f763800L) != 0L || (active1 & 0x3504eb45c815L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 4;
            return 102;
         }
         return -1;
      case 5:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 5;
            return 57;
         }
         if ((active0 & 0x10802008440000L) != 0L || (active1 & 0x140081410814L) != 0L)
            return 102;
         if ((active0 & 0x60101c27323800L) != 0L || (active1 & 0x21046a04c001L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 5;
            return 102;
         }
         return -1;
      case 6:
         if ((active0 & 0x40101c20100000L) != 0L || (active1 & 0x210428048000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 6;
            return 102;
         }
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 6;
            return 11;
         }
         if ((active0 & 0x20000007222800L) != 0L || (active1 & 0x42004001L) != 0L)
            return 102;
         if ((active0 & 0x80000L) != 0L)
            return 108;
         return -1;
      case 7:
         if ((active0 & 0x100020100000L) != 0L || (active1 & 0x408008000L) != 0L)
            return 102;
         if ((active1 & 0x200000000000L) != 0L)
            return 11;
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 7;
            return 11;
         }
         if ((active0 & 0x40001c00000000L) != 0L || (active1 & 0x10020040000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 7;
            return 102;
         }
         return -1;
      case 8:
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 8;
            }
            return 11;
         }
         if ((active0 & 0x40001c00000000L) != 0L || (active1 & 0x20040000L) != 0L)
            return 102;
         if ((active1 & 0x10000000000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 8;
            }
            return 102;
         }
         return -1;
      case 9:
         if ((active0 & 0x800001000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 9;
            return 11;
         }
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 9;
            return 102;
         }
         return -1;
      case 10:
         if ((active1 & 0x10000000000L) != 0L)
            return 102;
         if ((active0 & 0x800001000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 10;
            return 11;
         }
         return -1;
      case 11:
         if ((active0 & 0x800001000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 11;
            return 11;
         }
         return -1;
      case 12:
         if ((active0 & 0x800001000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 12;
            return 11;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800L);
      case 35:
         return jjStopAtPos(0, 140);
      case 40:
         return jjStartNfaWithStates_0(0, 130, 101);
      case 41:
         return jjStopAtPos(0, 131);
      case 42:
         jjmatchedKind = 149;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4040000L);
      case 43:
         return jjStopAtPos(0, 147);
      case 44:
         return jjStopAtPos(0, 150);
      case 45:
         return jjStartNfaWithStates_0(0, 148, 0);
      case 46:
         jjmatchedKind = 137;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800000L);
      case 47:
         return jjStartNfaWithStates_0(0, 153, 3);
      case 60:
         jjmatchedKind = 144;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x22000L);
      case 61:
         return jjStopAtPos(0, 138);
      case 62:
         jjmatchedKind = 142;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x3e0L, 0x0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x7c00L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x7f8000L, 0x10000000000000L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x7f800000L, 0x0L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x7f80000000L, 0x0L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1f8000000000L, 0x0L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x600000000000L, 0x0L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1ff000000000000L, 0x0L, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x3c00000000000000L, 0x0L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0xc000000000000000L, 0x0L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1fL, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3fe0L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7c000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1ff80000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1fe0000000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1e000000000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe0000000000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x300000000000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfc00000000000L, 0x0L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000000L);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(1, 151);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 154);
         break;
      case 61:
         if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(1, 139);
         else if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(1, 143);
         else if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(1, 145);
         else if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(1, 146);
         break;
      case 62:
         if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(1, 141);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000800000L, active1, 0x10302020084001L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000801f000c00L, active1, 0x1c3f00000L, active2, 0L);
      case 70:
      case 102:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 48, 102);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(1, 69, 102);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0x1c04200000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x4800000020001000L, active1, 0x2000004000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x10180010020L, active1, 0L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xfc0002000000c0L, active1, 0x20000000080L, active2, 0L);
      case 79:
      case 111:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(1, 30, 102);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 103, 102);
         return jjMoveStringLiteralDfa2_0(active0, 0xb2002200001e2000L, active1, 0x4000018008006L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000100L, active2, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x440000000000L, active1, 0x8010000070400L, active2, 0L);
      case 83:
      case 115:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 56, 102);
         return jjMoveStringLiteralDfa2_0(active0, 0x200L, active1, 0x80000000000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000800L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000600000L, active1, 0x3018L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x7c00000000L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(1, 14, 102);
         break;
      case 124:
         if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 152);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L, active1, 0x11600310000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000L);
      case 67:
      case 99:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 9, 102);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000001c03000000L, active1, 0x404000L);
      case 68:
      case 100:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 6, 102);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 33, 102);
         return jjMoveStringLiteralDfa3_0(active0, 0x8008000000000000L, active1, 0x40000000400L);
      case 69:
      case 101:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 107, 102);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xc04000000100L);
      case 70:
      case 102:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 87, 102);
         return jjMoveStringLiteralDfa3_0(active0, 0x400000004000000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L, active1, 0x44000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x200006000000000L, active1, 0x90200000a0000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0L);
      case 76:
      case 108:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 5, 102);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 99, 102);
         return jjMoveStringLiteralDfa3_0(active0, 0x80008000000L, active1, 0x100088000088L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x60000L, active1, 0x10L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4004100000181000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000450000012000L, active1, 0x40000L);
      case 82:
      case 114:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 41, 104);
         return jjMoveStringLiteralDfa3_0(active0, 0x600000L, active1, 0x4200000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x100001b0000000L, active1, 0x10000000008000L);
      case 84:
      case 116:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(2, 65, 102);
         else if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 96, 102);
         return jjMoveStringLiteralDfa3_0(active0, 0xe0208000800800L, active1, 0x2000001002001L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0x22000000L);
      case 87:
      case 119:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 92, 102);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4L);
      case 89:
      case 121:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 102);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x10004001000L, active1, 0x40000000004L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10L);
      case 67:
      case 99:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 102);
         return jjMoveStringLiteralDfa4_0(active0, 0x108000000000L, active1, 0x200000040000L);
      case 68:
      case 100:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 84, 102);
         break;
      case 69:
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 102);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 102);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 59, 102);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 102);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 116, 102);
         return jjMoveStringLiteralDfa4_0(active0, 0x7c000c08000000L, active1, 0xa2002c00L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000L);
      case 72:
      case 104:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 113, 102);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x800101000400L, active1, 0x8000L);
      case 75:
      case 107:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 60, 102);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 114, 102);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000L);
      case 76:
      case 108:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 102);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 67, 102);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 85, 102);
         return jjMoveStringLiteralDfa4_0(active0, 0x1002002000L, active1, 0x1002408000000L);
      case 77:
      case 109:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 42, 102);
         return jjMoveStringLiteralDfa4_0(active0, 0x60000L, active1, 0x40000000L);
      case 78:
      case 110:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 102);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 72, 102);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 102, 102);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 110, 102);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L, active1, 0x10000000000L);
      case 79:
      case 111:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 102);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 55, 102);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000420000L);
      case 80:
      case 112:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 61, 102);
         break;
      case 82:
      case 114:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 102);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0x801200000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000510000L, active1, 0x80000L);
      case 84:
      case 116:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 102);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 102);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0x8000000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000400000000000L, active1, 0x100001000001L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L, active1, 0L);
      case 89:
      case 121:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 71, 102);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L, active1, 0x4000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000L);
      case 69:
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 102);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 83, 102);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 97, 102);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 101, 102);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 111, 102);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 112, 102);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 115, 102);
         return jjMoveStringLiteralDfa5_0(active0, 0x2a2800L, active1, 0x100040040010L);
      case 70:
      case 102:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 102);
         break;
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L, active1, 0L);
      case 72:
      case 104:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 39, 102);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x20040000L, active1, 0x4L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L, active1, 0x10000L);
      case 78:
      case 110:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 102);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 105, 102);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L, active1, 0L);
      case 80:
      case 112:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 46, 106);
         return jjMoveStringLiteralDfa5_0(active0, 0xc00000000L, active1, 0x20000000L);
      case 82:
      case 114:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 102);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 74, 105);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 77, 102);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 81, 102);
         return jjMoveStringLiteralDfa5_0(active0, 0x50000000001000L, active1, 0x3400801L);
      case 83:
      case 115:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 62, 102);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000000L);
      case 84:
      case 116:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 102);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 90, 102);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 100, 107);
         return jjMoveStringLiteralDfa5_0(active0, 0x102008100000L, active1, 0x40000008000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x1004000000L, active1, 0L);
      case 88:
      case 120:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 51, 102);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 80, 102);
         return jjMoveStringLiteralDfa6_0(active0, 0x1102000L, active1, 0x210008000001L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L, active1, 0L);
      case 68:
      case 100:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 86, 102);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000L);
      case 69:
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 102);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 106, 102);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000800L, active1, 0L);
      case 71:
      case 103:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 47, 102);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L, active1, 0x400008000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L, active1, 0L);
      case 78:
      case 110:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 88, 102);
         return jjMoveStringLiteralDfa6_0(active0, 0x20220000L, active1, 0x40000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000L);
      case 82:
      case 114:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 102);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 68, 102);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 37, 102);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 75, 102);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 108, 102);
         return jjMoveStringLiteralDfa6_0(active0, 0x40001000000000L, active1, 0x2000000L);
      case 84:
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 102);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 52, 102);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 66, 102);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 95, 102);
         return jjMoveStringLiteralDfa6_0(active0, 0xc00000000L, active1, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L, active1, 0x10008000000L);
      case 69:
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 25, 102);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 78, 102);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 89, 102);
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x1c00000000L, active1, 0x20000000L);
      case 76:
      case 108:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 102);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(6, 64, 102);
         break;
      case 78:
      case 110:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 11, 102);
         else if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 13, 102);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L, active1, 0x400000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 53, 102);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000000L);
      case 84:
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 17, 102);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 108);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 21, 102);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 26, 102);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 94, 102);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 50:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 109, 11);
         break;
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 79, 102);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000L, active1, 0L);
      case 75:
      case 107:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 91, 102);
         break;
      case 78:
      case 110:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 44, 102);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0xc00000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000L);
      case 84:
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 20, 102);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 29, 102);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 98, 102);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 36, 102);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(8, 82, 102);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000000000L);
      case 78:
      case 110:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x800001000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 54, 102);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(8, 93, 102);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000L, active1, 0L);
      case 78:
      case 110:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 104, 102);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 71:
      case 103:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L, 0L);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L, 0L);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 82:
      case 114:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(13, 12, 11);
         break;
      case 84:
      case 116:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(13, 35, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 101;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 43:
               case 11:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(11);
                  break;
               case 61:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(11);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddStates(0, 6);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(81, 91);
                  else if (curChar == 40)
                     jjCheckNAddTwoStates(27, 28);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(24, 25);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(19, 20);
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 35:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(11);
                  break;
               case 53:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(11);
                  break;
               case 107:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(11);
                  }
                  else if (curChar == 32)
                     jjCheckNAddTwoStates(48, 52);
                  break;
               case 45:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(11);
                  break;
               case 63:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(11);
                  break;
               case 104:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(11);
                  }
                  else if (curChar == 32)
                     jjCheckNAddTwoStates(68, 77);
                  break;
               case 37:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(11);
                  break;
               case 55:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(11);
                  break;
               case 108:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(11);
                  }
                  else if (curChar == 32)
                     jjCheckNAddTwoStates(58, 60);
                  break;
               case 47:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(11);
                  break;
               case 78:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(11);
                  break;
               case 65:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(11);
                  break;
               case 39:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(11);
                  break;
               case 57:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(11);
                  break;
               case 44:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(11);
                  break;
               case 101:
                  if (curChar == 43)
                     jjCheckNAddTwoStates(29, 30);
                  else if (curChar == 32)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 31:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(11);
                  break;
               case 62:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(11);
                  break;
               case 106:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(11);
                  }
                  else if (curChar == 32)
                     jjCheckNAddTwoStates(40, 42);
                  break;
               case 36:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(11);
                  break;
               case 67:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(11);
                  break;
               case 54:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(11);
                  break;
               case 105:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(11);
                  }
                  else if (curChar == 32)
                     jjCheckNAddTwoStates(32, 34);
                  break;
               case 103:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAdd(91);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(81, 82);
                  }
                  break;
               case 64:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(11);
                  break;
               case 102:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(11);
                  break;
               case 0:
                  if (curChar != 45)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 4:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar == 42)
                     jjCheckNAddStates(7, 9);
                  break;
               case 6:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(7, 5);
                  break;
               case 7:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(7, 5);
                  break;
               case 8:
                  if (curChar == 47 && kind > 122)
                     kind = 122;
                  break;
               case 9:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 12:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 14:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjAddStates(10, 11);
                  break;
               case 15:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 17:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 18:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 19:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 20:
                  if (curChar != 39)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(22, 20);
                  break;
               case 22:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(22, 20);
                  break;
               case 23:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 24:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 25:
                  if (curChar == 34 && kind > 128)
                     kind = 128;
                  break;
               case 26:
                  if (curChar == 40)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 27:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 28:
                  if (curChar == 43)
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 29:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 30:
                  if (curChar == 41 && kind > 129)
                     kind = 129;
                  break;
               case 32:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(32, 34);
                  break;
               case 40:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(40, 42);
                  break;
               case 48:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(48, 52);
                  break;
               case 58:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(58, 60);
                  break;
               case 68:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(68, 77);
                  break;
               case 70:
                  if (curChar == 32)
                     jjAddStates(12, 13);
                  break;
               case 80:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(81, 91);
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(81, 82);
                  break;
               case 83:
                  if ((0x280000000000L & l) != 0L)
                     jjAddStates(14, 15);
                  break;
               case 84:
                  if (curChar == 46)
                     jjCheckNAdd(85);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAdd(85);
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddStates(16, 18);
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAdd(87);
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(88, 89);
                  break;
               case 89:
                  if (curChar == 46)
                     jjCheckNAdd(90);
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAdd(90);
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAdd(91);
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddStates(0, 6);
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(93, 82);
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddStates(19, 21);
                  break;
               case 95:
                  if (curChar == 46)
                     jjCheckNAdd(96);
                  break;
               case 96:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(96, 82);
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(97, 98);
                  break;
               case 98:
                  if (curChar == 46)
                     jjCheckNAdd(99);
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAdd(99);
                  break;
               case 100:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAdd(100);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 43:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(11);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 61:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(11);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 2:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  else if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  else if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  else if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 35:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(11);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 53:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(11);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 107:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(11);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 45:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(11);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 63:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(11);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 104:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(11);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 37:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(11);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 55:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(11);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 108:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(11);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 47:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(11);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjAddStates(22, 23);
                  break;
               case 78:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(11);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 65:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(11);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(11);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(24, 25);
                  break;
               case 57:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(11);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjAddStates(26, 27);
                  break;
               case 44:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(11);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(11);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjAddStates(28, 29);
                  break;
               case 62:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(11);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 106:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(11);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(11);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 67:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(11);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjAddStates(30, 31);
                  break;
               case 54:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(11);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 105:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(11);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 64:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(11);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 102:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(11);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  break;
               case 1:
                  if (kind > 121)
                     kind = 121;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  jjCheckNAddTwoStates(4, 5);
                  break;
               case 6:
               case 7:
                  jjCheckNAddTwoStates(7, 5);
                  break;
               case 10:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(11);
                  break;
               case 13:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAddStates(32, 34);
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 16:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(17);
                  break;
               case 19:
                  jjCheckNAddTwoStates(19, 20);
                  break;
               case 22:
                  jjCheckNAddTwoStates(22, 20);
                  break;
               case 24:
                  jjAddStates(35, 36);
                  break;
               case 33:
                  if ((0x200000002000000L & l) != 0L && kind > 132)
                     kind = 132;
                  break;
               case 34:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 38:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 41:
                  if ((0x200000002000000L & l) != 0L && kind > 133)
                     kind = 133;
                  break;
               case 42:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 46:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 49:
                  if ((0x10000000100L & l) != 0L && kind > 134)
                     kind = 134;
                  break;
               case 50:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 56:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 59:
                  if ((0x200000002000000L & l) != 0L && kind > 135)
                     kind = 135;
                  break;
               case 60:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 66:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 69:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(12, 13);
                  break;
               case 71:
                  if ((0x4000000040L & l) != 0L && kind > 136)
                     kind = 136;
                  break;
               case 72:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 74:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 79:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 82:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(37, 39);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 6:
               case 7:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(7, 5);
                  break;
               case 19:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 22:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(22, 20);
                  break;
               case 24:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(35, 36);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 101 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   93, 94, 95, 82, 97, 98, 100, 5, 6, 8, 14, 15, 70, 72, 84, 86, 
   87, 88, 89, 94, 95, 82, 48, 52, 40, 42, 58, 60, 32, 34, 68, 77, 
   13, 14, 15, 24, 25, 83, 84, 86, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\50", "\51", null, null, null, null, null, "\56", 
"\75", "\41\75", "\43", "\74\76", "\76", "\76\75", "\74", "\74\75", "\52\75", "\53", 
"\55", "\52", "\54", "\56\52", "\174\174", "\57", "\52\52", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0xc83fffffffffffffL, 0x7ffffffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x600000000000000L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x600000000000000L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[101];
private final int[] jjstateSet = new int[202];
protected char curChar;
public SqlTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public SqlTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 101; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
