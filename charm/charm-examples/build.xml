<?xml version="1.0"?>

<!-- 
The DOCTYPE declaration declares the location of product-specific parts of the
Ant build file. You can change the values of these declarations to point to
other available files. This gives you an opportunity to choose what database
and EJB container to use for the Middlegen samples.

Note that this syntax has nothing to do with Ant or Middlegen. This
is the standard way defined by w3c to dynamically include external
files in an XML document. Any decent XML parser will do the include
transparently. Try to open this file in Internet Explorer and see
for yourself.
-->

<!DOCTYPE project [
   
]>



<project name="Charm Based Project" default="copy_web" basedir="." xmlns:ivy="antlib:fr.jayasoft.ivy.ant" xmlns:artifact="antlib:org.apache.maven.artifact.ant">

	<import file="../../common/build-common.xml"/>

	<!-- grab system environment and prepend with env. -->
	<property environment="env" />

	<!-- User Properties From File -->
	<property file="${user.home}\build.properties" />
	<!-- Load Project Properties From File 
	
	    MUST DEFINE THE FOLLOWING:
		jdbc.user
		jdbc.password
		jdbc.schema
		jdbc.driver
		jdbc.url
		jdbc.org
		jdbc.artifact
		jdbc.version
		hibernate.dialect
	-->
	<property file="src\main\filters\dev-filter.properties" />

	<!-- Source Paths -->
	<property name="src.dir" value="src/main" />
	<property name="src.java.dir" value="${src.dir}/java" />
	<property name="src.web.dir" value="${src.dir}/webapp" />
	<property name="src.resources.dir" value="${src.dir}/resources" />
	<property name="src.velocity.dir" value="${src.dir}/velocity" />
	<property name="src.tld.dir" value="${src.dir}/tld" />
	<property name="src.hibernate.dir" value="${src.web.dir}/WEB-INF/mappings" />

	<!-- Test Source Paths -->
	<property name="test.dir" value="test" />
	<property name="test.includes" value="**/*Test.class" />
	<property name="test.excludes" value="**/Abstract*" />

	<!-- Target Paths -->
	<property name="target.dir" value="target" />
	<property name="target.web.dir" value="${target.dir}/web" />
	<property name="target.webinf.dir" value="${target.web.dir}/WEB-INF" />
	<property name="target.classes.dir" value="${target.dir}/classes" />
	<property name="target.reports.dir" value="${target.dir}/reports/" />
	<property name="target.mockclasses.dir" value="${target.dir}/mock-classes" />
	<property name="target.testclasses.dir" value="${target.dir}/test-classes/" />
	<property name="target.testreports.dir" value="${target.dir}/test-reports/" />
	<property name="target.testsummary.dir" value="${target.dir}/test-summary/" />

	<!-- Target Paths For Generation -->
	<property name="target.gen.dir" value="${target.dir}/generated" />
	<property name="target.gen.hibernate.dir" value="${target.gen.dir}/hibernate/" />
	<property name="target.gen.tld.dir" value="${target.gen.dir}/tld" />
	<property name="target.gen.webinf.dir" value="${target.gen.dir}/webinf" />
	<property name="target.gen.middlegen.dir" value="${target.gen.dir}/middlegen" />

	<property name="staging.deploy.dir" value="//bmw/skeleton/jakarta-tomcat-5.5.7/webapps" />

	<target name="clean" description="Cleans out the target directories">

		<delete dir="${target.classes.dir}" />
		<delete dir="${target.web.dir}" />
		<delete dir="${target.webinf.dir}" />
		<delete dir="${target.classes.dir}" />
		<delete dir="${target.reports.dir}" />
		<delete dir="${target.mockclasses.dir}" />
		<delete dir="${target.testclasses.dir}" />
		<delete dir="${target.testreports.dir}" />
		<delete dir="${target.junit.reports.dir}" />
		<delete dir="${target.testsummary.dir}" />
		<delete dir="${target.gen.dir}" />
		<delete dir="${target.gen.hibernate.dir}" />
		<delete dir="${target.gen.webinf.dir}" />
		<delete dir="${target.gen.tld.dir}" />

		<!-- If we are doing inplace builds -->
		<delete dir="${src.web.dir}/WEB-INF/lib" />
		<delete dir="${src.web.dir}/WEB-INF/classes" />

		<!-- Just kill target dir (it's safer). No need at this point to keep it. -->
		<delete dir="${target.dir}" />

		<delete dir="${dist.dir}" />
		<delete dir="${javadocs.dir}" />
	</target>


	<target name="init" description="Used to initialize the build" depends="">

		<splash imageurl="http://maven.apexit.com/charm/images/charm.gif" />

		<echo message="ANT_HOME = ${env.ANT_HOME}" />
		<echo message="JAVA_HOME = ${env.JAVA_HOME}" />

		<!-- Create the time stamp -->
		<tstamp>
			<format property="dateStamp" pattern="yyyy-MM-dd" locale="en" />
		</tstamp>

		<filterchain id="resource.filters">
			<replacetokens>
				<token key="VERSION" value="${version}" />
				<token key="DATE" value="${TODAY}" />
				<token key="TIME" value="${TSTAMP}" />
			</replacetokens>
		</filterchain>

		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${target.dir}" />

	</target>



	<!-- =================================================================== -->
	<!-- BUILD TARGETS                                                       -->
	<!-- =================================================================== -->
	<target name="copy_web" depends="init" description="Does a quick copy of source files from source web to target web">

		<echo message="Copying web files from ${src.web.dir} to ${maven.build.directory}/${maven.build.final.name}" />
		<copy todir="${maven.build.directory}/${maven.build.final.name}">
			<fileset dir="${src.web.dir}">
				<include name="**/*.xml" />
				<include name="**/*.hbm.xml" />
				<include name="**/*.css" />
				<include name="**/*.jsp" />
				<include name="**/*.jpg" />
				<include name="**/*.gif" />
				<include name="**/*.html" />
				<exclude name="**/*.svn" />
				<exclude name="**/*.svn/**" />
			</fileset>
		</copy>

		<echo message="Copying property files from ${src.resources.dir} to ${maven.build.directory}/${maven.build.final.name}/WEB-INF/classes" />
		<copy todir="${maven.build.directory}/${maven.build.final.name}/WEB-INF/classes">
			<fileset dir="${src.resources.dir}">
				<include name="**/*.properties" />
				<exclude name="**/*.svn" />
				<exclude name="**/*.svn/**" />
			</fileset>
		</copy>
	</target>

	<target name="rebuild_core" description="Does an build/install of charm-core, and then builds the current package">

		<exec executable="cmd.exe" dir="${work.home}/charm/charm-core" spawn="false">
			<arg line="/c mvn install" />
		</exec>
		<exec executable="cmd.exe" dir="${basedir}" spawn="false">
			<arg line="/c mvn package" />
		</exec>

	</target>

	<target name="staging_copy" depends="init,clean" description="Performs a clean build and moves war to staging server">

		<exec executable="cmd.exe" dir="${basedir}" spawn="false">
			<arg line="/c mvn clean:clean package" />
		</exec>

		<copy file="${maven.build.directory}/skeleton.war" tofile="${staging.deploy.dir}/skeleton.war" />

	</target>
		
	<target name="staging_deploy" depends="init,clean" description="Performs a clean build and moves war to staging server">
		<exec executable="cmd.exe" dir="${basedir}" spawn="false">
			<arg line="/c mvn clean tomcat:undeploy tomcat:deploy" />
		</exec>
	</target>

	<target name="hbm2java" depends="init,init_hibernate_tools" description="Generates the .java files from the .hbm files">
		<hibernatetool destdir="${target.gen.hibernate.dir}">
			<!-- A configuration can take a configurationfile and/or a fileset of hbm.xml's -->
			<configuration configurationfile="cfg/hibernate.cfg.xml">
				<fileset dir="${src.hibernate.dir}" id="id">
					<include name="**/*.hbm.xml" />
				</fileset>
			</configuration>
			<!-- generate default .java files -->
			<hbm2java />
			<!-- export schema to database. If outputfilename is provided a text file is generated instead. -->
			<hbm2ddl drop="false" outputfilename="database.sql" />
		</hibernatetool>
	</target>

	<target name="hbm2doc" depends="init,init_hibernate_tools" description="Generates html documentation from .hbm files">
	<!-- This will pull our settings from dev-filters.properties -->
		<exec executable="cmd.exe" dir="." spawn="false">
			<arg line="/c mvn clean process-resources"/>
		</exec>
		
		<mkdir dir="${target.gen.hibernate.dir}" />

		<hibernatetool destdir="${target.gen.hibernate.dir}">
			<!-- database settings are read from hibernate.cfg.xml and/or via propertyfile if provided -->
			<jdbcconfiguration revengfile="target/classes/hibernate.reveng.xml" packageName="${jdbc.orm.package}" configurationfile="target/classes/hibernate.cfg.xml" reversestrategy="charm.hibernate.tools.CharmReverseEngineeringStrategy" />

			<!-- generate docs-->
			<hbm2doc />

		</hibernatetool>

		
	</target>

	<target name="db2hbm" depends="init,init_hibernate_tools" description="Reverse Engineers the database, generating .hbm.xml mapping files and .java POJOs">

		<!-- This will pull our settings from dev-filters.properties -->
		<exec executable="cmd.exe" dir="." spawn="false">
			<arg line="/c mvn clean process-resources"/>
		</exec>
		
		<mkdir dir="${target.gen.hibernate.dir}" />

		<hibernatetool destdir="${target.gen.hibernate.dir}">
			<!-- database settings are read from hibernate.cfg.xml and/or via propertyfile if provided -->
			<jdbcconfiguration revengfile="target/classes/hibernate.reveng.xml" packageName="${jdbc.orm.package}" configurationfile="target/classes/hibernate.cfg.xml" reversestrategy="charm.hibernate.tools.CharmReverseEngineeringStrategy" />
			<!-- generate default .hbm.xml files -->
			<hbm2hbmxml />
			<!-- generate default .java files without EJB3 annotations -->
			<hbm2java ejb3="false" />
		</hibernatetool>

		<!-- Remove catalog="XXX" from the hbm.xml files -->
		<replace dir="${target.gen.hibernate.dir}" includes="**/*.hbm.xml" excludes="**/*.java" token="catalog=&quot;skeleton&quot;" value=" " />

		<!-- Modify the generator from assigned to identity -->
		<replace dir="${target.gen.hibernate.dir}" includes="**/*.hbm.xml" excludes="**/*.java" token="&lt;generator class=&quot;assigned&quot; /&gt;" value="&lt;generator class=&quot;identity&quot; /&gt;" />

	</target>
	
	<target name="copy_hibernate" depends="init" description="Copies the generated .hbm.xml and .java files to the source directories">

		<mkdir dir="${src.hibernate.dir}" />

		<!--Delete the existing hbm.xml files -->
		<delete>
			<fileset dir="${src.hibernate.dir}">
				<include name="**/*.hbm.xml" />
			</fileset>
		</delete>

		<!-- Copy the hbm.xml files to the src/web/WEB-INF/mappings folder -->
		<copy todir="${src.hibernate.dir}" flatten="true">
			<fileset dir="${target.gen.hibernate.dir}">
				<include name="**/*.hbm.xml" />
			</fileset>
		</copy>

		<!-- Copy the java files to the src/java folder -->
		<copy todir="${src.java.dir}" flatten="false">
			<fileset dir="${target.gen.hibernate.dir}">
				<include name="**/*.java" />
			</fileset>
		</copy>

	</target>

	<target name="webdoclet" depends="init_xdoclet" description="Generates tld files for your tags in the source directory">

		<webdoclet destDir="${target.gen.tld.dir}" verbose="true" force="true">

			<fileset dir="${src.java.dir}">
				<include name="**/*Tag.java" />
			</fileset>
			<fileset dir="${work.home}/charm/charm-core/src/main/java/">
				<include name="com/dynamic/charm/web/form/tag/BaseTag.java" />
				<include name="com/dynamic/charm/web/tag/support/SpringAwareTag.java" />
			</fileset>

			<jspTaglib 
				jspVersion="2.0" 
				displayname="${application.name} Tag Library" 
				shortname="${application.shortname}" 
				uri="/tld/${application.shortname}" 
				acceptAbstractClasses="false" 
				destDir="${target.gen.tld.dir}" 
				destinationFile="${application.shortname}.tld" />

		</webdoclet>

		<copy file="${target.gen.tld.dir}/${application.shortname}.tld" tofile="${src.tld.dir}/${application.shortname}.tld" />

	</target>

	<!-- =================================================================== -->
	<!-- DATABASE SCRIPTS                                                    -->
	<!-- =================================================================== -->
	<target name="create_audit" depends="init,init_jdbc" description="runs the audit.sql dbscript, generated by middlegen task">

		<sql driver="${jdbc.driver}" url="${jdbc.url}" userid="${jdbc.user}" password="${jdbc.password}" src="${target.gen.middlegen.dir}/sql/audit.sql" classpathref="jdbc.classpath" />
	</target>


	<target name="base_data" depends="init,init_jdbc">
		<sql
			driver="${jdbc.driver}"
			url="${jdbc.url}"
			userid="${jdbc.user}"
			password="${jdbc.password}"
			classpathref="jdbc.classpath"
		>
			<transaction src="dbscripts/basedata.sql"/>

		</sql>
	</target>

	<target name="create_tables" depends="init,init_jdbc">
		<sql
			driver="${jdbc.driver}"
			url="${jdbc.url}"
			userid="${jdbc.user}"
			password="${jdbc.password}"
			classpathref="jdbc.classpath"
		>

			<transaction src="dbscripts/create.sql"/>

		</sql>
	</target>


	<target name="middlegen" description="Runs Middlegen" depends="init,init_middlegen">

		<delete dir="${target.gen.middlegen.dir}" quiet="true" />
		<mkdir dir="${target.gen.middlegen.dir}" />

		<middlegen appname="${application.shortname}" prefsdir="${src.dir}/middlegen-prefs" gui="${gui}" databaseurl="${jdbc.url}" initialContextFactory="${java.naming.factory.initial}" providerURL="${java.naming.provider.url}" datasourceJNDIName="${datasource.jndi.name}" driver="${jdbc.driver}" username="${jdbc.user}" password="${jdbc.password}" schema="${jdbc.schema}" catalog="${jdbc.catalog}" includeViews="false">

			<hibernate destination="${target.gen.middlegen.dir}/hibernate" package="${jdbc.orm.package}" genXDocletTags="true" javaTypeMapper="middlegen.plugins.hibernate.HibernateJavaTypeMapper">

				<!-- JSP -->
				<fileproducer destination="${target.gen.middlegen.dir}/jsp" filename="{0}_detail.jsp" template="${src.velocity.dir}/table_detail.vm" />
				<fileproducer destination="${target.gen.middlegen.dir}/jsp" filename="{0}_list.jsp" template="${src.velocity.dir}/table_list.vm" />
				<fileproducer destination="${target.gen.middlegen.dir}/jsp" filename="navigation.jsp" template="${src.velocity.dir}/tables.vm" />

				<!-- WEB-INF -->
				<fileproducer destination="${target.gen.middlegen.dir}/WEB-INF" filename="namedQueries.xml" template="${src.velocity.dir}/namedQueries.vm" />

				<!-- SQL -->
				<fileproducer destination="${target.gen.middlegen.dir}/sql" filename="audit.sql" template="${src.velocity.dir}/audit.vm" />

				<!-- Resources -->
				<fileproducer destination="${target.gen.middlegen.dir}/resources" filename="navigation.properties" template="${src.velocity.dir}/navigation.vm" />

				<!-- Config File for reverse engineering with hibernate-tools -->
				<fileproducer destination="${target.gen.middlegen.dir}/resources" filename="hibernate.reveng.xml" template="${src.velocity.dir}/hibernate.reveng.vm" />


			</hibernate>
		</middlegen>

	</target>


	<target name="debug_classpath" depends="init" description="Prints the classpath used to build the project">
		<property name="temp.cp" value="${maven-ant.build.classpath}" />
		<echo message="build.classpath = ${temp.cp}" />
	</target>

	<target name="package_source" depends="init">
		<zip destfile="${target.dir}/src-${dateStamp}.zip">
			<zipfileset dir="${src.dir}" prefix="src" />
			<zipfileset dir="${test.src.dir}" prefix="test" />
		</zip>
	</target>

	<target name="info" description="Echoes useful system properties">
		<echo message="java.vm.info=${java.vm.info}" />
		<echo message="java.vm.name=${java.vm.name}" />
		<echo message="java.vm.vendor=${java.vm.vendor}" />
		<echo message="java.vm.version=${java.vm.version}" />
		<echo message="os.arch=${os.arch}" />
		<echo message="os.name=${os.name}" />
		<echo message="os.version=${os.version}" />
		<echo message="java.home = ${java.home}" />

		<echo message="build.compiler = ${build.compiler}" />
		<echo message="file.encoding=${file.encoding}" />
		<echo message="user.home = ${user.home}" />
		<echo message="user.language=${user.language}" />

		<echoproperties>
			<propertyset>
				<propertyref prefix="jdbc" />
				<propertyref prefix="application"/>
			</propertyset>
		</echoproperties>


	</target>


	<target name="build_all" depends="init">


		<exec executable="cmd.exe" dir="." spawn="false">
			<arg line="/c mvn clean package" />
			<arg line="-Dfilter.name=prod" />
		</exec>
		<copy tofile="target/${application.shortname}-prod.war" file="target/${application.shortname}.war" />

		<exec executable="cmd.exe" dir="." spawn="false">
			<arg line="/c mvn clean package" />
			<arg line="-Dfilter.name=dev" />
		</exec>
		<copy tofile="target/${application.shortname}-dev.war" file="target/${application.shortname}.war" />

		<delete file="target/${application.shortname}.war" />

	</target>


</project>
